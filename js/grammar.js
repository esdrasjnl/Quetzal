/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v); return o }, $V0 = [1, 5], $V1 = [1, 7], $V2 = [1, 8], $V3 = [2, 5, 13, 14], $V4 = [1, 15], $V5 = [1, 16], $V6 = [1, 17], $V7 = [1, 18], $V8 = [1, 19], $V9 = [1, 20], $Va = [1, 21], $Vb = [1, 22], $Vc = [1, 23], $Vd = [1, 34], $Ve = [1, 25], $Vf = [1, 26], $Vg = [1, 27], $Vh = [1, 28], $Vi = [1, 29], $Vj = [1, 30], $Vk = [1, 31], $Vl = [1, 32], $Vm = [1, 33], $Vn = [1, 35], $Vo = [1, 36], $Vp = [12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35], $Vq = [12, 17, 18, 19, 20, 35], $Vr = [12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 35];
    var parser = {
        trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "START": 3, "INSTRUCTIONS": 4, "EOF": 5, "INSTRUCTION": 6, "PRINT_INST": 7, "semicolon": 8, "PRINT": 9, "open_bracket": 10, "EXPRESSION": 11, "close_bracket": 12, "print": 13, "print_ln": 14, "minus": 15, "not": 16, "or": 17, "and": 18, "equals": 19, "different": 20, "less_than": 21, "greater_than": 22, "less_than_or_equal": 23, "greater_than_or_equal": 24, "plus": 25, "multiply": 26, "divide": 27, "INTEGER": 28, "DOUBLE": 29, "true": 30, "false": 31, "char": 32, "struct": 33, "open_par": 34, "close_par": 35, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 8: "semicolon", 10: "open_bracket", 12: "close_bracket", 13: "print", 14: "print_ln", 15: "minus", 16: "not", 17: "or", 18: "and", 19: "equals", 20: "different", 21: "less_than", 22: "greater_than", 23: "less_than_or_equal", 24: "greater_than_or_equal", 25: "plus", 26: "multiply", 27: "divide", 28: "INTEGER", 29: "DOUBLE", 30: "true", 31: "false", 32: "char", 33: "struct", 34: "open_par", 35: "close_par" },
        productions_: [0, [3, 2], [4, 2], [4, 1], [6, 2], [6, 2], [7, 4], [9, 1], [9, 1], [11, 2], [11, 2], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 3], [11, 1], [11, 1], [11, 1], [11, 1], [11, 1], [11, 1], [11, 3]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 2: case 3:



                    break;
                case 4:

                    this.$ = $$[$0 - 1];

                    break;
                case 5:

                    var e = new Exception($$[$0 - 1], _$[$0 - 1].first_line, (_$[$0 - 1].first_column + 1), ExceptionType.SYNTACTIC);
                    Exception.exceptionList.push(e);

                    break;
                case 6:

                    this.$ = new Print(String($$[$0 - 3]), _$[$0 - 3].first_line, (_$[$0 - 3].first_column + 1), $$[$0 - 1]);
                    this.$.run();
                    break;
                case 7:
                    this.$ = "print";
                    break;
                case 8:
                    this.$ = "println";
                    break;
                case 9:

                    var n = new Node_(NodeName.ARITHMETIC, "-", _$[$0 - 1].first_line, (_$[$0 - 1].first_column + 1), NodeReturnType.DOUBLE);
                    this.$ = new Expression([n, $$[$0]]);

                    break;
                case 10:

                    var n = new Node_(NodeName.LOGIC, "!", _$[$0 - 1].first_line, (_$[$0 - 1].first_column + 1), NodeReturnType.Boolean);
                    this.$ = new Expression([n, $$[$0]]);

                    break;
                case 11: case 12:

                    var n = new Node_(NodeName.LOGIC, String($$[$0 - 1]), _$[$0 - 2].first_line, (_$[$0 - 2].first_column + 1), NodeReturnType.BOOLEAN);
                    this.$ = new Expression([$$[$0 - 2], n, $$[$0]]);

                    break;
                case 13: case 14: case 15: case 16: case 17: case 18:

                    var n = new Node_(NodeName.RELATIONAL, String($$[$0 - 1]), _$[$0 - 2].first_line, (_$[$0 - 2].first_column + 1), NodeReturnType.BOOLEAN);
                    this.$ = new Expression([$$[$0 - 2], n, $$[$0]]);

                    break;
                case 19: case 20: case 21: case 22:

                    var n = new Node_(NodeName.ARITHMETIC, String($$[$0 - 1]), _$[$0 - 2].first_line, (_$[$0 - 2].first_column + 1), NodeReturnType.DOUBLE);
                    this.$ = new Expression([$$[$0 - 2], n, $$[$0]]);

                    break;
                case 23:

                    var pd = new PrimitiveData(NodeName.INTEGER, Number($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.INTEGER);
                    this.$ = new Expression([pd]);

                    break;
                case 24:

                    var pd = new PrimitiveData(NodeName.DOUBLE, Number($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.DOUBLE);
                    this.$ = new Expression([pd]);

                    break;
                case 25:

                    var pd = new PrimitiveData(NodeName.BOOLEAN, true, _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.BOOLEAN);
                    this.$ = new Expression([pd]);

                    break;
                case 26:

                    var pd = new PrimitiveData(NodeName.BOOLEAN, false, _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.BOOLEAN);
                    this.$ = new Expression([pd]);

                    break;
                case 27:

                    var pd = new PrimitiveData(NodeName.CHAR, String($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.CHAR);
                    this.$ = new Expression([pd]);

                    break;
                case 28:

                    var s = new PrimitiveData(NodeName.STRUCT, Struct($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.STRUCT);
                    this.$ = new Expression([s]);

                    break;
                case 29:

                    this.$ = new Expression([$$[$0 - 1]]);

                    break;
            }
        },
        table: [{ 2: $V0, 3: 1, 4: 2, 6: 3, 7: 4, 9: 6, 13: $V1, 14: $V2 }, { 1: [3] }, { 5: [1, 9] }, { 2: $V0, 4: 10, 5: [2, 3], 6: 3, 7: 4, 9: 6, 13: $V1, 14: $V2 }, { 8: [1, 11] }, { 8: [1, 12] }, { 10: [1, 13] }, { 10: [2, 7] }, { 10: [2, 8] }, { 1: [2, 1] }, { 5: [2, 2] }, o($V3, [2, 4]), o($V3, [2, 5]), { 11: 14, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 12: [1, 24], 15: $Vd, 17: $Ve, 18: $Vf, 19: $Vg, 20: $Vh, 21: $Vi, 22: $Vj, 23: $Vk, 24: $Vl, 25: $Vm, 26: $Vn, 27: $Vo }, { 11: 37, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 38, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, o($Vp, [2, 23]), o($Vp, [2, 24]), o($Vp, [2, 25]), o($Vp, [2, 26]), o($Vp, [2, 27]), o($Vp, [2, 28]), { 11: 39, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 8: [2, 6] }, { 11: 40, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 41, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 42, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 43, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 44, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 45, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 46, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 47, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 48, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 49, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 50, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, { 11: 51, 15: $V4, 16: $V5, 28: $V6, 29: $V7, 30: $V8, 31: $V9, 32: $Va, 33: $Vb, 34: $Vc }, o($Vp, [2, 9]), o($Vp, [2, 10]), { 15: $Vd, 17: $Ve, 18: $Vf, 19: $Vg, 20: $Vh, 21: $Vi, 22: $Vj, 23: $Vk, 24: $Vl, 25: $Vm, 26: $Vn, 27: $Vo, 35: [1, 52] }, o([12, 17, 35], [2, 11], { 15: $Vd, 18: $Vf, 19: $Vg, 20: $Vh, 21: $Vi, 22: $Vj, 23: $Vk, 24: $Vl, 25: $Vm, 26: $Vn, 27: $Vo }), o([12, 17, 18, 35], [2, 12], { 15: $Vd, 19: $Vg, 20: $Vh, 21: $Vi, 22: $Vj, 23: $Vk, 24: $Vl, 25: $Vm, 26: $Vn, 27: $Vo }), o($Vq, [2, 13], { 15: $Vd, 21: $Vi, 22: $Vj, 23: $Vk, 24: $Vl, 25: $Vm, 26: $Vn, 27: $Vo }), o($Vq, [2, 14], { 15: $Vd, 21: $Vi, 22: $Vj, 23: $Vk, 24: $Vl, 25: $Vm, 26: $Vn, 27: $Vo }), o($Vq, [2, 15], { 15: $Vd, 25: $Vm, 26: $Vn, 27: $Vo }), o($Vq, [2, 16], { 15: $Vd, 25: $Vm, 26: $Vn, 27: $Vo }), o($Vq, [2, 17], { 15: $Vd, 25: $Vm, 26: $Vn, 27: $Vo }), o($Vq, [2, 18], { 15: $Vd, 25: $Vm, 26: $Vn, 27: $Vo }), o($Vr, [2, 19], { 26: $Vn, 27: $Vo }), o($Vr, [2, 20], { 26: $Vn, 27: $Vo }), o($Vp, [2, 21]), o($Vp, [2, 22]), o($Vp, [2, 29])],
        defaultActions: { 7: [2, 7], 8: [2, 8], 9: [2, 1], 10: [2, 2], 24: [2, 6] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [], // token stack
                vstack = [null], // semantic value stack
                lstack = [], // location stack
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;

            var args = lstack.slice.call(arguments, 1);

            //this.reductionCount = this.shiftCount = 0;

            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            // copy state
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }

            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);

            var ranges = lexer.options && lexer.options.ranges;

            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }

            _token_stack:
            var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }

            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                // retreive state number from top of stack
                state = stack[stack.length - 1];

                // use default actions if available
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    // read action for current state and first input
                    action = table[state] && table[state][symbol];
                }

                _handle_error:
                // handle parse error
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var error_rule_depth;
                    var errStr = '';

                    // Return the rule stack depth where the nearest error rule can be found.
                    // Return FALSE when no error recovery rule was found.
                    function locateNearestErrorRecoveryRule(state) {
                        var stack_probe = stack.length - 1;
                        var depth = 0;

                        // try to recover from error
                        for (; ;) {
                            // check for error recovery rule in this state
                            if ((TERROR.toString()) in table[state]) {
                                return depth;
                            }
                            if (state === 0 || stack_probe < 2) {
                                return false; // No suitable error recovery rule available.
                            }
                            stack_probe -= 2; // popStack(1): [symbol, action]
                            state = stack[stack_probe];
                            ++depth;
                        }
                    }

                    if (!recovering) {
                        // first see if there's any chance at hitting an error recovery rule:
                        error_rule_depth = locateNearestErrorRecoveryRule(state);

                        // Report error
                        expected = [];
                        for (p in table[state]) {
                            if (this.terminals_[p] && p > TERROR) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                        }
                        if (lexer.showPosition) {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        } else {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                (symbol == EOF ? "end of input" :
                                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
                        }
                        this.parseError(errStr, {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: (error_rule_depth !== false)
                        });
                    } else if (preErrorSymbol !== EOF) {
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                    }

                    // just recovered from another error
                    if (recovering == 3) {
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                        }

                        // discard current lookahead and grab another
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;
                        symbol = lex();
                    }

                    // try to recover from error
                    if (error_rule_depth === false) {
                        throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                    }
                    popStack(error_rule_depth);

                    preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                    symbol = TERROR;         // insert generic error symbol as new lookahead
                    state = stack[stack.length - 1];
                    action = table[state] && table[state][TERROR];
                    recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
                }

                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }

                switch (action[0]) {
                    case 1: // shift
                        //this.shiftCount++;

                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]); // push state
                        symbol = null;
                        if (!preErrorSymbol) { // normal execution/no error
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            // error just occurred, resume old lookahead f/ before error
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;

                    case 2:
                        // reduce
                        //this.reductionCount++;

                        len = this.productions_[action[1]][1];

                        // perform semantic action
                        yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                        // default location, uses first token for firsts, last for lasts
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                        if (typeof r !== 'undefined') {
                            return r;
                        }

                        // pop off stack
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }

                        stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;

                    case 3:
                        // accept
                        return true;
                }

            }

            return true;
        }
    };


    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                        + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-sensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0: return 'dot';
                        break;
                    case 1: return 'comma';
                        break;
                    case 2: return 'colon';
                        break;
                    case 3: return 8;
                        break;
                    case 4: return 34;
                        break;
                    case 5: return 35;
                        break;
                    case 6: return 10;
                        break;
                    case 7: return 12;
                        break;
                    case 8: return 'open_brace';
                        break;
                    case 9: return 'close_brace';
                        break;
                    case 10: return 'copy';
                        break;
                    case 11: return 25;
                        break;
                    case 12: return 15;
                        break;
                    case 13: return 26;
                        break;
                    case 14: return 27;
                        break;
                    case 15: return 'percent';
                        break;
                    case 16: return 'null';
                        break;
                    case 17: return 'int';
                        break;
                    case 18: return 'double';
                        break;
                    case 19: return 'boolean';
                        break;
                    case 20: return 30;
                        break;
                    case 21: return 31;
                        break;
                    case 22: return 32;
                        break;
                    case 23: return 'string';
                        break;
                    case 24: return 33;
                        break;
                    case 25: return 'void';
                        break;
                    case 26: return 'power';
                        break;
                    case 27: return 'sqrt_root';
                        break;
                    case 28: return 'sine';
                        break;
                    case 29: return 'cosine';
                        break;
                    case 30: return 'tangent';
                        break;
                    case 31: return 'logarithm';
                        break;
                    case 32: return 'parse';
                        break;
                    case 33: return 'to_int';
                        break;
                    case 34: return 'to_double';
                        break;
                    case 35: return 'to_string';
                        break;
                    case 36: return 'type_of';
                        break;
                    case 37: return 13;
                        break;
                    case 38: return 14;
                        break;
                    case 39: return 'push';
                        break;
                    case 40: return 'pop';
                        break;
                    case 41: return 'char_at';
                        break;
                    case 42: return 'substring';
                        break;
                    case 43: return 'length';
                        break;
                    case 44: return 'to_upper_case';
                        break;
                    case 45: return 'to_lower_case';
                        break;
                    case 46: return 23;
                        break;
                    case 47: return 24;
                        break;
                    case 48: return 19;
                        break;
                    case 49: return 20;
                        break;
                    case 50: return 21;
                        break;
                    case 51: return 22;
                        break;
                    case 52: return 23;
                        break;
                    case 53: return 24;
                        break;
                    case 54: return 18;
                        break;
                    case 55: return 17;
                        break;
                    case 56: return 16;
                        break;
                    case 57: return 'ternary';
                        break;
                    case 58: return 'concat';
                        break;
                    case 59: return 'repeat';
                        break;
                    case 60: return 'value';
                        break;
                    case 61: return 'assign';
                        break;
                    case 62: return 'if';
                        break;
                    case 63: return 'else';
                        break;
                    case 64: return 'switch';
                        break;
                    case 65: return 'case';
                        break;
                    case 66: return 'default';
                        break;
                    case 67: return 'while';
                        break;
                    case 68: return 'do';
                        break;
                    case 69: return 'for';
                        break;
                    case 70: return 'in';
                        break;
                    case 71:
                        break;
                    case 72:
                        break;
                    case 73: return 29;
                        break;
                    case 74: return 28;
                        break;
                    case 75: return 5;
                        break;
                    case 76:
                        var e = new Exception(yy_.yytext, yy_.yylloc.first_line, (yy_.yylloc.first_column + 1), ExceptionType.LEXICAL);
                        Exception.exceptionList.push(e);

                        break;
                }
            },
            rules: [/^(?:\.)/, /^(?:,)/, /^(?::)/, /^(?:;)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\{)/, /^(?:\})/, /^(?:#)/, /^(?:\+)/, /^(?:-)/, /^(?:\*)/, /^(?:\/)/, /^(?:%)/, /^(?:null\b)/, /^(?:int\b)/, /^(?:double\b)/, /^(?:boolean\b)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:char\b)/, /^(?:String\b)/, /^(?:struct\b)/, /^(?:void\b)/, /^(?:pow\b)/, /^(?:sqrt\b)/, /^(?:sin\b)/, /^(?:cos\b)/, /^(?:tan\b)/, /^(?:log10\b)/, /^(?:parse\b)/, /^(?:toInt\b)/, /^(?:toDouble\b)/, /^(?:string\b)/, /^(?:typeof\b)/, /^(?:print\b)/, /^(?:println\b)/, /^(?:push\b)/, /^(?:pop\b)/, /^(?:characterOfPosition\b)/, /^(?:subString\b)/, /^(?:length\b)/, /^(?:toUppercase\b)/, /^(?:toLowercase\b)/, /^(?:<=)/, /^(?:>=)/, /^(?:==)/, /^(?:!=)/, /^(?:<)/, /^(?:>)/, /^(?:<=)/, /^(?:>=)/, /^(?:&&)/, /^(?:\|\|)/, /^(?:!)/, /^(?:\?)/, /^(?:&)/, /^(?:\^)/, /^(?:\$)/, /^(?:=)/, /^(?:if\b)/, /^(?:else\b)/, /^(?:switch\b)/, /^(?:case\b)/, /^(?:default\b)/, /^(?:while\b)/, /^(?:do\b)/, /^(?:for\b)/, /^(?:in\b)/, /^(?:[ \r\t]+)/, /^(?:\n)/, /^(?:[0-9]+(\.[0-9]+)?\b)/, /^(?:[0-9]+\b)/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser; parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = grammar;
    exports.Parser = grammar.Parser;
    exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}