/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,17],$V2=[1,18],$V3=[1,14],$V4=[1,19],$V5=[1,20],$V6=[1,16],$V7=[1,13],$V8=[1,24],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,25],$Vd=[2,5,16,17,23,24,26,27,29,33,55,61,62,63,64],$Ve=[1,42],$Vf=[1,54],$Vg=[1,53],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,55],$Vr=[8,32],$Vs=[1,76],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,77],$VD=[1,78],$VE=[8,21,38,40,41,42,43,44,45,46,47,48,49,50],$VF=[8,21,40,41,42,43],$VG=[8,21,38,40,41,42,43,44,45,46,47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"PRINT_INST":7,"semicolon":8,"IF_SENTENCE":9,"WHILE_SENTENCE":10,"DECLARATION":11,"ASSINGMENT":12,"FOR_SENTENCE":13,"DO_WHILE_SENTENCE":14,"SCAPE":15,"close_brace":16,"for":17,"open_par":18,"DECL_ASSING":19,"EXPRESSION":20,"close_par":21,"INSTRUCTIONS_BLOCK":22,"do":23,"while":24,"PRINT":25,"print":26,"print_ln":27,"ATTRIBUTE_TYPE":28,"IDENTIFIER":29,"assign":30,"ID_LIST":31,"comma":32,"if":33,"MORE_IF_OPTIONS":34,"else":35,"ELSE_IF_ELSE":36,"open_brace":37,"minus":38,"not":39,"or":40,"and":41,"equals":42,"different":43,"less_than":44,"greater_than":45,"less_than_or_equal":46,"greater_than_or_equal":47,"plus":48,"multiply":49,"divide":50,"INTEGER":51,"DOUBLE":52,"true":53,"false":54,"char":55,"string_tk":56,"struct":57,"INCREMENTAL":58,"ATTRIBUTE_LIST":59,"ATTRIBUTE":60,"int":61,"double":62,"boolean":63,"string":64,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semicolon",16:"close_brace",17:"for",18:"open_par",21:"close_par",23:"do",24:"while",26:"print",27:"print_ln",29:"IDENTIFIER",30:"assign",32:"comma",33:"if",35:"else",37:"open_brace",38:"minus",39:"not",40:"or",41:"and",42:"equals",43:"different",44:"less_than",45:"greater_than",46:"less_than_or_equal",47:"greater_than_or_equal",48:"plus",49:"multiply",50:"divide",51:"INTEGER",52:"DOUBLE",53:"true",54:"false",55:"char",56:"string_tk",57:"struct",58:"INCREMENTAL",61:"int",62:"double",63:"boolean",64:"string"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[15,1],[15,1],[13,9],[19,1],[19,1],[14,7],[7,4],[25,1],[25,1],[11,4],[11,2],[31,3],[31,1],[12,3],[9,6],[34,2],[34,0],[36,1],[36,1],[22,3],[10,5],[20,2],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,3],[20,1],[59,3],[59,1],[60,2],[28,1],[28,1],[28,1],[28,1],[28,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		$$[$0-1].name = NodeName.ROOT;
		return $$[$0-1];
	
break;
case 2:

		this.$ = $$[$0-1];
		this.$.children.push($$[$0]);
	
break;
case 3:

		this.$ = new Node_(NodeName.INSTRUCTIONS, "INSTRUCTIONS", -1, -1, [$$[$0]], new NodeData(-1, -1, -1, -1), false, false);
	
break;
case 4: case 7: case 8:

		this.$ = $$[$0-1];
	
break;
case 5: case 6: case 9: case 10: case 12: case 13:

		this.$ = $$[$0];
	
break;
case 11:

		var e = new Exception($$[$0-1], _$[$0-1].first_line, (_$[$0-1].first_column + 1), ExceptionType.SYNTACTIC);
		Exception.exceptionList.push(e);
	
break;
case 14:

		this.$ = new For(NodeName.FOR, String($$[$0-8]),_$[$0-8].first_line, (_$[$0-8].first_column + 1),[$$[$0-6], $$[$0-4], $$[$0-2],$$[$0]])
	
break;
case 15: case 16:

			this.$ = $$[$0]
		
break;
case 17:

		this.$ = new Do_While(NodeName.DO_WHILE, String($$[$0-6]), _$[$0-6].first_line, (_$[$0-6].first_column + 1), [$$[$0-5], $$[$0-2]]);
	
break;
case 18:

		this.$ = new Print(String($$[$0-3]), _$[$0-3].first_line, (_$[$0-3].first_column + 1), [$$[$0-1]]);
	
break;
case 19: case 20:
this.$ = String($$[$0]);
break;
case 21:

		var id = new Id(NodeName.ID, String($$[$0-2]), _$[$0-2].first_line, (_$[$0-2].first_column + 1));
		this.$ = new Declaration($$[$0-3].line, $$[$0-3].column, [$$[$0-3], id, $$[$0]]);
	
break;
case 22:

		this.$ = new Declaration($$[$0-1].line, $$[$0-1].column, [$$[$0-1], $$[$0]]);
	
break;
case 23:

		var id = new Id(NodeName.ID, String($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1));
		this.$ = $$[$0-2];
		this.$.children.push(id);
	
break;
case 24:

		var id = new Id(NodeName.ID, String($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1));
		this.$ = new Node_(NodeName.ID_LIST, "", -1, -1, [id], new NodeData(-1, -1, -1, -1), false, false);
	
break;
case 25:

		var id = new Id(NodeName.ID, String($$[$0-2]), _$[$0-2].first_line, (_$[$0-2].first_column + 1));
		this.$ = new Assignment(_$[$0-2].first_line, (_$[$0-2].first_column + 1), [id, $$[$0]]);
	
break;
case 26:

		this.$ = new If(NodeName.IF, String($$[$0-5]), _$[$0-5].first_line, (_$[$0-5].first_column + 1), [$$[$0-3], $$[$0-1], $$[$0]]);
	
break;
case 27:

		$$[$0].line = _$[$0-1].first_line;
		$$[$0].column = (_$[$0-1].first_column + 1);

		this.$ = $$[$0];
	
break;
case 29:

		/*ELSE*/
		this.$ = new Else([$$[$0]]);
	
break;
case 30:

		/*IF-ELSE-IF*/
		this.$ = $$[$0];
	
break;
case 31:

		this.$ = $$[$0-1]
	
break;
case 32:

		this.$ = new While(NodeName.WHILE, String($$[$0-4]), _$[$0-4].first_line, (_$[$0-4].first_column + 1), [$$[$0-2], $$[$0]]);
	
break;
case 33:

		var n = new Node_(NodeName.ARITHMETIC, "-", _$[$0-1].first_line, (_$[$0-1].first_column + 1), [], new NodeData(-1, NodeReturnType.DOUBLE, -1, -1), false, false);
		this.$ = new Expression([n, $$[$0]]);
	
break;
case 34:

		var n = new Node_(NodeName.LOGIC, "!", _$[$0-1].first_line, (_$[$0-1].first_column + 1), [], new NodeData(-1, NodeReturnType.BOOLEAN, -1, -1), false, false);
		this.$ = new Expression([n, $$[$0]]);
	
break;
case 35: case 36:

		var n = new Node_(NodeName.LOGIC, String($$[$0-1]), _$[$0-2].first_line, (_$[$0-2].first_column + 1), [], new NodeData(-1, NodeReturnType.BOOLEAN, -1, -1), false, false);
		this.$ = new Expression([$$[$0-2], n, $$[$0]]);
	
break;
case 37: case 38: case 39: case 40: case 41: case 42:

		var n = new Node_(NodeName.RELATIONAL, String($$[$0-1]), _$[$0-2].first_line, (_$[$0-2].first_column + 1), [], new NodeData(-1, NodeReturnType.BOOLEAN, -1, -1), false, false);
		this.$ = new Expression([$$[$0-2], n, $$[$0]]);
	
break;
case 43: case 44: case 45: case 46:

		var n = new Node_(NodeName.ARITHMETIC, String($$[$0-1]), _$[$0-2].first_line, (_$[$0-2].first_column + 1), [], new NodeData(-1, NodeReturnType.DOUBLE, -1, -1), false, false);
		this.$ = new Expression([$$[$0-2], n, $$[$0]]);
	
break;
case 47:

		var pd = new PrimitiveData(NodeName.INTEGER, Number($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.INTEGER);
		this.$ = new Expression([pd]);
	
break;
case 48:

		var pd = new PrimitiveData(NodeName.DOUBLE, Number($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.DOUBLE);
		this.$ = new Expression([pd]);
	
break;
case 49:

		var pd = new PrimitiveData(NodeName.BOOLEAN, true, _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.BOOLEAN);
		this.$ = new Expression([pd]);
	
break;
case 50:

		var pd = new PrimitiveData(NodeName.BOOLEAN, false, _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.BOOLEAN);
		this.$ = new Expression([pd]);
	
break;
case 51:

		var pd = new PrimitiveData(NodeName.CHAR, String($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.CHAR);
		this.$ = new Expression([pd]);
	
break;
case 52:

		var pd = new PrimitiveData(NodeName.STRING, String($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.STRING);
		this.$ = new Expression([pd]);
	
break;
case 53:

		var s = new PrimitiveData(NodeName.STRUCT, Struct($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1), NodeReturnType.STRUCT);
		this.$ = new Expression([s]);
	
break;
case 54:

		var id = new Id(NodeName.ID, String($$[$0]), _$[$0].first_line, (_$[$0].first_column + 1));
		this.$ = new Expression([id]);
	
break;
case 55:

		this.$ = new Expression([$$[$0-1]]);
	
break;
case 57:

		//código para js
	
break;
case 60: case 61: case 62: case 63: case 64:

		this.$ = new Type_($$[$0], _$[$0].first_line, (_$[$0].first_column + 1));
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,17:$V1,23:$V2,24:$V3,25:12,26:$V4,27:$V5,28:15,29:$V6,33:$V7,55:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{1:[3]},{2:$V0,5:[1,26],6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,17:$V1,23:$V2,24:$V3,25:12,26:$V4,27:$V5,28:15,29:$V6,33:$V7,55:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},o($Vd,[2,3]),{8:[1,28]},o($Vd,[2,5]),o($Vd,[2,6]),{8:[1,29]},{8:[1,30]},o($Vd,[2,9]),o($Vd,[2,10]),{8:[1,32],15:31,16:[1,33]},{18:[1,34]},{18:[1,35]},{18:[1,36]},{29:[1,37],31:38},{30:[1,39]},{18:[1,40]},{22:41,37:$Ve},{18:[2,19]},{18:[2,20]},{29:[2,60]},{29:[2,61]},{29:[2,62]},{29:[2,63]},{29:[2,64]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,4]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),{18:$Vf,20:43,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:56,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:57,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},o($Vr,[2,24],{30:[1,58]}),{8:[2,22],32:[1,59]},{18:$Vf,20:60,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{11:63,12:62,19:61,28:15,29:$V6,55:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{24:[1,64]},{2:$V0,4:65,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,17:$V1,23:$V2,24:$V3,25:12,26:$V4,27:$V5,28:15,29:$V6,33:$V7,55:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{21:[1,66],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},{18:$Vf,20:79,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:80,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},o($VE,[2,47]),o($VE,[2,48]),o($VE,[2,49]),o($VE,[2,50]),o($VE,[2,51]),o($VE,[2,52]),o($VE,[2,53]),o($VE,[2,54]),{18:$Vf,20:81,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},o($VE,[2,56]),{21:[1,82],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},{21:[1,83],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},{18:$Vf,20:84,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{29:[1,85]},{8:[2,25],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},{8:[1,86]},{8:[2,15]},{8:[2,16]},{18:[1,87]},{2:$V0,6:27,7:4,9:5,10:6,11:7,12:8,13:9,14:10,16:[1,88],17:$V1,23:$V2,24:$V3,25:12,26:$V4,27:$V5,28:15,29:$V6,33:$V7,55:$V8,61:$V9,62:$Va,63:$Vb,64:$Vc},{8:[2,18]},{18:$Vf,20:89,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:90,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:91,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:92,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:93,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:94,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:95,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:96,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:97,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:98,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:99,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:100,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},o($VE,[2,33]),o($VE,[2,34]),{21:[1,101],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},{22:102,37:$Ve},{22:103,37:$Ve},{8:[2,21],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},o($Vr,[2,23]),{18:$Vf,20:104,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{18:$Vf,20:105,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},o([2,5,16,17,23,24,26,27,29,33,35,55,61,62,63,64],[2,31]),o([8,21,40],[2,35],{38:$Vs,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD}),o([8,21,40,41],[2,36],{38:$Vs,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD}),o($VF,[2,37],{38:$Vs,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD}),o($VF,[2,38],{38:$Vs,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD}),o($VF,[2,39],{38:$Vs,48:$VB,49:$VC,50:$VD}),o($VF,[2,40],{38:$Vs,48:$VB,49:$VC,50:$VD}),o($VF,[2,41],{38:$Vs,48:$VB,49:$VC,50:$VD}),o($VF,[2,42],{38:$Vs,48:$VB,49:$VC,50:$VD}),o($VG,[2,43],{49:$VC,50:$VD}),o($VG,[2,44],{49:$VC,50:$VD}),o($VE,[2,45]),o($VE,[2,46]),o($VE,[2,55]),o($Vd,[2,28],{34:106,35:[1,107]}),o($Vd,[2,32]),{8:[1,108],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},{21:[1,109],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},o($Vd,[2,26]),{9:112,22:111,33:$V7,36:110,37:$Ve},{18:$Vf,20:113,29:$Vg,38:$Vh,39:$Vi,51:$Vj,52:$Vk,53:$Vl,54:$Vm,55:$Vn,56:$Vo,57:$Vp,58:$Vq},{8:[1,114]},o($Vd,[2,27]),o($Vd,[2,29]),o($Vd,[2,30]),{21:[1,115],38:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD},o($Vd,[2,17]),{22:116,37:$Ve},o($Vd,[2,14])],
defaultActions: {19:[2,19],20:[2,20],21:[2,60],22:[2,61],23:[2,62],24:[2,63],25:[2,64],26:[2,1],62:[2,15],63:[2,16],66:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// One line comment 
break;
case 1:// Multi-Line comment
break;
case 2:return 'dot';
break;
case 3:return 32;
break;
case 4:return 'colon';
break;
case 5:return 8;
break;
case 6:return 18;
break;
case 7:return 21;
break;
case 8:return 'open_bracket';
break;
case 9:return 'close_bracket';
break;
case 10:return 37;
break;
case 11:return 16;
break;
case 12:return 'copy';
break;
case 13:return 48;
break;
case 14:return 38;
break;
case 15:return 49;
break;
case 16:return 50;
break;
case 17:return 'percent';  
break;
case 18:return 'null';
break;
case 19:return 61;
break;
case 20:return 62;
break;
case 21:return 63;
break;
case 22:return 53;
break;
case 23:return 54;
break;
case 24:return 55;
break;
case 25:return 64;
break;
case 26:return 57;
break;
case 27:return 'void';
break;
case 28:return 'power';
break;
case 29:return 'sqrt_root';
break;
case 30:return 'sine';
break;
case 31:return 'cosine';
break;
case 32:return 'tangent';
break;
case 33:return 'logarithm';
break;
case 34:return 'parse';
break;
case 35:return 'to_int';
break;
case 36:return 'to_double';
break;
case 37:return 'to_string';
break;
case 38:return 'type_of';
break;
case 39:return 26;
break;
case 40:return 27;
break;
case 41:return 'push';
break;
case 42:return 'pop';
break;
case 43:return 'char_at';
break;
case 44:return 'substring';
break;
case 45:return 'length';
break;
case 46:return 'to_upper_case';
break;
case 47:return 'to_lower_case';
break;
case 48:return 46;
break;
case 49:return 47;
break;
case 50:return 42;
break;
case 51:return 43;
break;
case 52:return 44;
break;
case 53:return 45;
break;
case 54:return 46;
break;
case 55:return 47;
break;
case 56:return 41;
break;
case 57:return 40;
break;
case 58:return 39;
break;
case 59:return 'ternary';
break;
case 60:return 'concat';
break;
case 61:return 'repeat';
break;
case 62:return 'value';
break;
case 63:return 30;
break;
case 64:return 33;
break;
case 65:return 35;
break;
case 66:return 'switch';
break;
case 67:return 'case';
break;
case 68:return 'default';
break;
case 69:return 24;
break;
case 70:return 23;
break;
case 71:return 17;
break;
case 72:return 'in';
break;
case 73:
break;
case 74:
break;
case 75:return 52;
break;
case 76:return 51;
break;
case 77:return 29;
break;
case 78:    string = ""; this.begin("STRING"); 
break;
case 79:    string = ""; this.begin("STRING"); 
break;
case 80:    this.begin('INITIAL'); yy_.yytext=""; yy_.yytext=string;  return 56; 
break;
case 81:    this.begin('INITIAL'); yy_.yytext=""; yy_.yytext=string;  return 56; 
break;
case 82:    string+=yy_.yytext;  
break;
case 83:    string+="\t";    
break;
case 84:    string+="\n";    
break;
case 85:    string+="\r";    
break;
case 86:    string+='\"';    
break;
case 87:    string+='\\';    
break;
case 88:return 5;
break;
case 89:
	var e = new Exception(yy_.yytext, yy_.yylloc.first_line, (yy_.yylloc.first_column + 1), ExceptionType.LEXICAL);
	Exception.exceptionList.push(e);

break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:#)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:struct\b)/,/^(?:void\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:string\b)/,/^(?:typeof\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:characterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUppercase\b)/,/^(?:toLowercase\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:&)/,/^(?:\^)/,/^(?:\$)/,/^(?:=)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\b)/,/^(?:["])/,/^(?:['])/,/^(?:")/,/^(?:[\'])/,/^(?:[^\n\r\"\\']+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\")/,/^(?:\\)/,/^(?:$)/,/^(?:.+)/],
conditions: {"STRING":{"rules":[80,81,82,83,84,85,86,87],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}